apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: spring-sample
    name: spring-sample
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: spring-sample
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 7
    labels:
      app: spring-sample
    name: spring-sample
  spec:
    replicas: 3
    selector:
      deploymentconfig: spring-sample
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: spring-sample
          deploymentconfig: spring-sample
      spec:
        containers:
        - image: docker-registry.default.svc:5000/dev/spring-sample@sha256:68e81197f91616a9aca5ebcbe1539911505b7c3323b88c87021cfc97ec427a31
          imagePullPolicy: Always
          name: spring-sample
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - spring-sample
        from:
          kind: ImageStreamTag
          name: spring-sample:latest
          namespace: dev
        lastTriggeredImage: docker-registry.default.svc:5000/dev/spring-sample@sha256:68e81197f91616a9aca5ebcbe1539911505b7c3323b88c87021cfc97ec427a31
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: spring-sample
    name: spring-sample
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: spring-sample:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /spring-sample
      git:
        ref: master
        uri: https://github.com/btihor/rhoar-spring.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: java:8
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: 1e9b63fa30563021
      type: Generic
    - github:
        secret: 5cb6a99d595b73c8
      type: GitHub
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: spring-sample
    name: spring-sample
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/dev/spring-sample:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
kind: List
metadata: {}
